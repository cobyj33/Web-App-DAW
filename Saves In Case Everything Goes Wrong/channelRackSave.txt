// Before a huge refactoring that transferred logic to note and sound objects

const selectionColor = "rgb(255, 255, 255)";
let columnSize = 10; //pixels

function program() {
    console.log("Hello");
    $("#channelRack").hide();
    $("#channelRack .closeBar .closeButton").click(function() {
      $("#channelRack").hide();
    });
  
    channelRackInfo = {
      visibleBeats: 6, //In measures
      racks: 4,
      rackSounds: ["Kick", "Clap", "Snare", "High Hat"],
      selectedSections: [],
      sounds: ["kick.mp3", "clap.mp3", "snare.mp3", "hihat.mp3"],
      currentTick: -1,
      looping: false,
      playing: false,
      metronome: false,

      get tickTime() {
        let beatsPerMillisecond = bpm / 60 / 1000;
        let millisecondsPerBeat = 1 / beatsPerMillisecond;
        return millisecondsPerBeat / 4; 
      },

      playSound: function(row) {
        let sound = new Audio(this.sounds[row]);
        sound.play();
      },

      addSound: function(soundName, src) {
        this.sounds.push(src);
        this.rackSounds.push(soundName);
        this.racks++;
      },

      selectArea: function(row, col) {
        this.selectedSections.push(createSectionObject(row, col));
      },

      deselectArea: function(row, col) {
        for (let i = 0; i < this.selectedSections.length; i++) {
          const {row: currentRow, col: currentCol} = this.selectedSections[i];
          if (currentRow == row && currentCol == col) {
            this.selectedSections.splice(i, 1);
            return;
          }
        }
      },

      isAreaSelected: function(r, c) {
        for (let i = 0; i < this.selectedSections.length; i++) {
          const {row, col} = this.selectedSections[i];
          if (row == r && col == c) {
            return true;
          }
        }
        console.log(`Area ${r} ${c} is NOT selected`);
        return false;
      },

      playTrack: function() {
        let queue = [...this.selectedSections].sort((a, b) => a.col - b.col)
        console.log(queue); 
        let tickTime = this.tickTime;
        playbackLoop(0)

        function showPlayLine(cell) {
          if (cell.get(0).style.backgroundColor == "") {
            cell.css('background-color', 'green');
          }
        }

        function removePlayLine(cell) {
          if (cell.get(0).style.backgroundColor == "green") {
            cell.css('background-color', '');
          }
        }

        function playbackLoop(tick) { 
          $(`#channelRack table tr td:nth-of-type(${tick + 2})`).each(function() { showPlayLine( $(this) )});
          $(`#channelRack table tr td:nth-of-type(${tick + 1})`).each(function() { removePlayLine( $(this) )});
          
          console.log(`tick: ${tick} tickTime: ${tickTime}`);
          if (tick > channelRackInfo.visibleBeats * 4 || queue.length == 0) {
            $(`#channelRack table tr td`).each(function() { removePlayLine( $(this) )});
            if(channelRackInfo.looping) {
              window.setTimeout(() => channelRackInfo.playTrack(), 0);
            }
            return;
          }

          while (queue[0].col - 1 == tick) {
            console.log("playing sound");
            channelRackInfo.playSound(queue[0].row);
            queue.shift();
            console.log(`queue length: ${queue.length}`);
            if (queue.length == 0) {
              break;
            }
          }

          tick++;
          window.setTimeout( () => playbackLoop(tick), tickTime);
        }
      },

      exportRackInfo: function() {

        track = {
          notes: [],
          startingBeat: 0,
          get trackLength() {
            let max = 0;
            for (let i = 0; i < notes.length; i++) {
              if (notes[i].tick > max)
                max = notes[i].tick;
            }
            return max;
          },

          play: function() {
            let tickTime = channelRackInfo.tickTime;
            let queue = [...this.note].sort((a, b) => a.tick - b.tick);
            let trackLength = this.trackLength;
            playbackLoop(0);

            function playbackLoop(currentTick) {
              if (currentTick > trackLength || queue.length == 0)
                return;
              
              while (queue[0].tick == currentTick) {
                console.log("playing sound");
                queue[0].play();
                queue.shift();
                if (queue.length == 0) {
                  break;
                }
              }
              
              currentTick++;
              window.setTimeout( () => playbackLoop(currentTick), tickTime);
            }
          }
        }

        for (let i = 0; i < this.selectedSections.length; i++) {
          track.notes.push(createNote(this.selectedSections[i]));
        }

        return track;
      },

      extend: function(extendAmount) {
        this.visibleBeats += 1;
        const column = document.createElement("td");
        column.classList.add("endOfRack");
        $("#channelRack .main table tr").each( function() {
          for (let i = 0; i < 4; i++) {
            $(column).clone().appendTo($(this));
          }
        });
        columnSize = $("#channelRack").width() / (this.visibleBeats * 4);
        console.log(`column size: ${columnSize}`);

        $("#channelRack .main table tr td").css("min-width", columnSize + "px");
        $(`#channelRack .main table tr td:nth-of-type(n + ${(this.visibleBeats - 2) * 4 + 1})`).removeClass("endOfRack");
        $("#channelRack .main table tr td:nth-of-type(4n + 1)").css("border-right", "6px solid #222222");
        channelRackEvents();
      }
    }

    function createSoundObject(nme, src) {
      return {
        name: nme,
        source: src
      }
    }

    function createSectionObject(r, c) {
      return selection = { row: r, col: c }
    }

    function createNote(selectionObject) {
      note = {
        sound: channelRackInfo.sounds[selectionObject.row],
        tick: selectionObject.col - 1,
        play: function() {
          let sound = new Audio(this.sound);
          sound.play();
        }
      }
      return note;
    }
    
    function appendSound() {
      console.log("maybe later");
    }

    $("#channelRack .bottomBar .addSoundButton").click(() => appendSound());
  
    function constructChannelRack() {
      $("#channelRack").toggle();
      const mainArea = document.querySelector("#channelRack .main");
      const table = document.createElement("table");
      const tablerow = document.createElement("tr");
      const tablecolumn = document.createElement("td");
      mainArea.innerHTML = "";
      columnSize = $("#channelRack").width() / (channelRackInfo.visibleBeats * 4);
  
      for (let row = 0; row < channelRackInfo.racks; row++) {
        let currentRow = tablerow.cloneNode(true);
        table.append(currentRow);
        for (let col = 0; col < channelRackInfo.visibleBeats * 4 + 1; col++) {
          let currentCol = tablecolumn.cloneNode(true);
          $(currentCol).css("min-width", columnSize + "px");
          
          if (col == 0) {
            const instrumentName = document.createElement("h2");
            instrumentName.innerText = channelRackInfo.rackSounds[row];
            instrumentName.classList.add("instrumentName");
            currentCol.append(instrumentName);
          }

          if (col >= (channelRackInfo.visibleBeats - 1) * 4) {
            // $(currentCol).addClass("endOfRack");
            currentCol.classList.add("endOfRack");
          }


          currentRow.append(currentCol);
        }
      }
      mainArea.append(table);
      $("#channelRack .main table tr td:nth-of-type(4n + 1)").css("border-right", "6px solid #222222");
    }

    function channelRackEvents() {
        $("#channelRack .main table tr td:nth-of-type(0)").off();
        $("#channelRack .main table tr td:nth-of-type(0)").mousedown(function() {
        const tableName = $(this);
          $(this).innerHTML = '';
          $(this).innerHTML = '<input type="text" placeholder="ins Name">';
          $(this).find("input").change(function() {

          })

          $(this).find("input").onkeydown(function(e) {
            let key = e.key;
            if (key == "Enter") {
              tableName.innerHTML = '';
              channelRackInfo.rackSounds[row] = $(this).value;
              tableName.innerHTML = $(this).value;
            }
          });
      });
      
      $("#channelRack .main table tr td").off();
      $("#channelRack .main table tr td").mousedown(function() {
        let row = $(this).parent().index();
        let col = $(this).index();

        console.log(` clicked ${row} ${col}`);
        if (col <= 0) {
          return;
        }

        if (!channelRackInfo.isAreaSelected(row, col)) {
          $(this).css('background-color', '#FFFFFF');
          channelRackInfo.selectArea(row, col);
          channelRackInfo.playSound(row);
        } else {
          $(this).css('background-color', '');
          channelRackInfo.deselectArea(row, col);
        }

        if (col > (channelRackInfo.visibleBeats - 1) * 4) {
          channelRackInfo.extend();
        }
        
      });

      $("#channelRack .bottomBar .addSoundButton").click(function() {

      });
    }
  
    //Standard Key Binding
    function keyPressed(event) {
      let keyCode = event.code;
      if (keyCode == "KeyC") {
        constructChannelRack();
        channelRackEvents();
        initializeButtonEvents();
      } else if (keyCode == "Space") {
        channelRackInfo.playTrack();
      }
      console.log("Key Pressed " + keyCode);
    }
  
    window.onkeydown = function(event) {
      keyPressed(event);
    }

    function initializeButtonEvents() {
      console.log("button events initialized");
      $("#channelRack-loopButton").click(function() {
        $(this).blur();
        console.log("loop button clicked");
        channelRackInfo.looping = !channelRackInfo.looping;
        if (channelRackInfo.looping) {
          $(this).addClass("on");
        } else {
          $(this).removeClass("on");
        }
      });

      $('#channelRack_playButton').click(function() {

      });

      $('#channelRack_stopButton').click(function() {

      });

      $('#channelRack_resetButton').click(function() {

      });

      $('#channelRack-saveButton').click(function() {
        console.log(channelRackInfo.exportRackInfo());
      });
    }
  
    constructChannelRack();
    channelRackEvents();
    initializeButtonEvents();

    $("#channel-rack-selection-button").click(function() {
        console.log("i hate javascript");
        constructChannelRack();
      channelRackEvents();
      initializeButtonEvents();
    });
}
  
$(window).on('load', program);